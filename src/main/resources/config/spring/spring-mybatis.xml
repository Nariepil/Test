<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
						   http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context 
						   http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop
         				   http://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/tx
     					   http://www.springframework.org/schema/tx/spring-tx.xsd">

	<!--对包中的所有符合要求的类进行扫描，以完成Bean创建和自动依赖注入的功能-->
	<context:component-scan base-package="com.cy.modules.**.service" />
	<!--对web包中的所有切面进行扫描，以完成Bean创建和自动依赖注入的功能 -->
	<aop:aspectj-autoproxy proxy-target-class="true" expose-proxy="true"/>
	
	
	<!-- 引入jdbc和mongodb属性文件 -->
	<context:property-placeholder location="classpath:/config/**/spring*.properties,classpath:/config/ip/ip.properties" ignore-unresolvable="true"/>

	<!-- Master数据源,负责write -->
	<bean id="masterDataSource" parent="parentDataSource">
		<property name="url" value="${datasource.masterUrl}" />
		<property name="username" value="${datasource.username}" />
		<property name="password" value="${datasource.password}" />
	</bean>
	<!-- Slave数据源,负责read -->
	<bean id="slaveDataSource" parent="parentDataSource">
		<property name="url" value="${datasource.slaveUrl}" />
		<property name="username" value="${datasource.username}" />
		<property name="password" value="${datasource.password}" />
	</bean>
	<!-- Druid数据源配置-->
	<bean id="parentDataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">
		<property name="filters" value="${druid.filters}"></property>
		<!-- 数据源需要数据库密码进行解密 -->
		<!-- <property name="connectionProperties" value="${druid.connectProperties}"></property> -->
		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="${druid.initialSize}" />
		<property name="minIdle" value="${druid.minIdle}" />
		<property name="maxActive" value="${druid.maxActive}" />
		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="${druid.maxWait}" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒  testWhileIdle的判断依据 -->
		<property name="timeBetweenEvictionRunsMillis" value="${druid.timeBetweenEvictionRunsMillis}" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒  设置5分钟-->
		<property name="minEvictableIdleTimeMillis" value="${druid.minEvictableIdleTimeMillis}" />
		<!-- 用来检测连接是否有效的sql，要求是一个查询语句。如果validationQuery 为 null，testOnBorrow、testOnReturn、testWhileIdle都不会其作用。-->
		<property name="validationQuery" value="${druid.validationQuery}" />
		<!-- 建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。 -->
		<property name="testWhileIdle" value="${druid.testWhileIdle}" />
		<!-- 申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。-->
		<property name="testOnBorrow" value="${druid.testOnBorrow}" />
		<!-- 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能 -->
		<property name="testOnReturn" value="${druid.testOnReturn}" />
		<!-- 是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql5.5以下的版本中没有PSCache功能，建议关闭掉。5.5及以上版本有PSCache，建议开启。 -->
		<property name="poolPreparedStatements" value="${druid.poolPreparedStatements}" />
		<!-- 要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100 -->
		<property name="maxPoolPreparedStatementPerConnectionSize" value="${druid.maxPoolPreparedStatementPerConnectionSize}" />
		<!-- 连接泄漏监测(忘记close) 配置removeAbandoned对性能会有一些影响，建议怀疑存在泄漏之后再打开 -->
		<!-- 打开removeAbandoned功能 -->
		<property name="removeAbandoned" value="${druid.removeAbandoned}" />
		<!-- 1800秒，也就是30分钟 -->
		<property name="removeAbandonedTimeout" value="${druid.removeAbandonedTimeout}" />
		<!-- 关闭abanded连接时输出错误日志 -->
		<property name="logAbandoned" value="${druid.logAbandoned}" />
		<property name="useGloalDataSourceStat" value="false" />
		<property name="proxyFilters">
			<list>
				<ref bean="stat-filter" />
				<ref bean="wall-filter" />
			</list>
		</property>
	</bean>
	
	<!-- 监控拦截器 -->
	<bean id="stat-filter" class="com.alibaba.druid.filter.stat.StatFilter">
		<!-- slowSqlMillis用来配置SQL慢的标准，执行时间超过slowSqlMillis的就是慢,并且通过日志输出执行慢的SQL，配置是5秒 -->
		<property name="slowSqlMillis" value="${druid.slowSqlMillis}" />
		<property name="logSlowSql" value="${druid.logSlowSql}" />
		<!-- 日志Sql合并配置 -->
		<property name="mergeSql" value="${druid.mergeSql}" />
	</bean>

	<!-- 配置防御SQL注入攻击 -->
	<bean id="wall-filter" class="com.alibaba.druid.wall.WallFilter">
		<!-- 数据库类型 -->
		<property name="dbType" value="${druid.dbType}" />
		<property name="config" ref="wall-config" />  <!-- Add by liupengfei 2016-10-28 -->
		<!-- 配置防御SQL注入攻击,采用默认配置 -->
		<!--
			<property name="dir" value="META-INF/druid/wall/mysql"></property>
		-->
	</bean>
	
	<bean id="wall-config" class="com.alibaba.druid.wall.WallConfig">  
        <property name="multiStatementAllow" value="true" />  
    </bean> 
    
    <bean id="druidStatInterceptor"
          class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor"/>

    <aop:config proxy-target-class="true" expose-proxy="true">
        <aop:advisor id="druidAdvisor" advice-ref="druidStatInterceptor"
                     pointcut="execution(* com.cy.modules..service..*ServiceImpl.*(..))" />
    </aop:config>
	
	
	<!-- 配置的动态数据源，实现读写分离 -->
	<bean id="dataSource" class="com.cy.core.mydatasource.ReadWriteDataSource">
        <property name="writeDataSource" ref="masterDataSource"/>
        <property name="readDataSourceMap">
           <map>
              <entry key="readDataSource1" value-ref="slaveDataSource"/>
           </map>
        </property>
    </bean>

    <bean id="readWriteDataSourceTransactionProcessor" class="com.cy.core.mydatasource.ReadWriteDataSourceProcessor">
        <property name="readMethodPrefixList">
			<list>
				<value>get</value>
				<value>query</value>
				<value>select</value>
				<value>find</value>
				<value>load</value>
				<value>count</value>
				<value>common</value>
			</list>       
        </property>
    </bean>

	<!-- 配置myBatis -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="mapperLocations" value="classpath*:/com/cy/modules/**/mapper/*.xml" />
		<property name="plugins">
			<list>
				<!-- ibatis分页插件拦截器配置 -->
				<bean id="pageInterceptor" class="com.cy.core.common.pagination.PageInterceptor">
					<property name="dialect" value="mysql" />
					<property name="pageSqlId" value=".*Page$" />
				</bean>
			</list>
		</property>
	</bean>

	<!-- myBatis mapper配置 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.cy.modules.**.dao" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>

	<!-- 事务配置-->
	<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<tx:annotation-driven transaction-manager="txManager" proxy-target-class="true" order="2147483646"/>
	
	<!-- 读写分离 -->
	<aop:config proxy-target-class="true" expose-proxy="true">
        <aop:aspect order="-2147483648" id="dbReadWriteSplitting" ref="readWriteDataSourceTransactionProcessor">
        	<aop:pointcut id="pointcut" expression="execution(* com.cy.modules..service.*ServiceImpl.*(..))" />
			<aop:around pointcut-ref="pointcut" method="determineReadOrWriteDB"/>
        </aop:aspect>
    </aop:config>
	<!-- 静态存储SpringContext -->
	<bean class="com.cy.util.SpringContextHolder" lazy-init="false" />

</beans>